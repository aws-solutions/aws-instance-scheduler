description: |
  ### Document Name - Scheduler-StopTaggedRDSClusters
  ## What does this document do?
  This document finds the tagged RDS Clusters and stop them.

  ## Input Parameters
  * TagKey: (Required) Tag Key to filter list of RDS DB Clusters
  * TagValue: (Required) Tag Value to filter list of RDS DB Clusters
  * SecondaryAutomationName: The secondary automation name invoked by this automation
  * ResourceTagMapList: The tags to add to the resources.
  * SolutionId: AWS Solution ID
  * SolutionVersion: AWS Solution version
  * AutomationAssumeRole: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
schemaVersion: '0.3'
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  TagKey:
    type: String
    default: Schedule
    description: The tag name (key) to filter list of RDS DB Clusters
  TagValue:
    type: StringList
    description: The schedule name (tag value) to filter list of RDS DB Clusters
  SecondaryAutomationName:
    type: String
    default: AWS-StartStopAuroraCluster
    description: The secondary automation name
  Action:
    type: String
    description: (Required) The action to take on the cluster.
    default: Stop
    allowedValues:
      - Stop
  ResourceTagMapList:
    type: MapList
    description: (Required) The tags to add to the resources.
    displayType: textarea
    default:
      - 'StateChanged': 'Resource started by Instance Scheduler'
  SolutionId:
    type: String
    description: SO0030
    default: SO0030
  SolutionVersion:
    type: String
    description: Solution version number
    default: v2.x
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf.
    default: ''
outputs:
  - stopRdsClusters.RdsClusterArns
mainSteps:
  - name: getTaggedRDSClusterIds
    description: Get tagged RDS DB Clusters
    action: 'aws:executeAwsApi'
    onFailure: Abort
    inputs:
      Service: resourcegroupstaggingapi
      Api: GetResources
      TagFilters:
        - Key: '{{ TagKey }}'
          Values: '{{ TagValue }}'
      ResourceTypeFilters:
        - rds:cluster
    outputs:
      - Name: rdsDbClusterArns
        Selector: $.ResourceTagMappingList..ResourceARN
        Type: StringList
      - Name: singleARN
        Selector: $.ResourceTagMappingList[0].ResourceARN
        Type: String
  - name: checkDBArnIsNotEmpty
    action: aws:branch
    inputs:
      Choices:
        - NextStep: stopRdsClusters
          Variable: "{{ getTaggedRDSClusterIds.singleARN }}"
          StartsWith: "arn:"
    isEnd: true
  - name: stopRdsClusters
    action: 'aws:executeScript'
    inputs:
      InputPayload:
        RdsResourceArns: '{{ getTaggedRDSClusterIds.rdsDbClusterArns }}'
        Region: '{{global:REGION}}'
        SecondaryAutomationName: '{{ SecondaryAutomationName }}'
        Action: '{{ Action }}'
        SolutionId: '{{SolutionId}}'
        SolutionVersion: '{{SolutionVersion}}'
        ExecutionRoleArn: '{{ AutomationAssumeRole }}'
      Runtime: python3.7
      Handler: start_rds_secondary_ssm_automation
      Script: |-
        import boto3
        import logging
        from botocore.config import Config


        def start_rds_secondary_ssm_automation(event, context) -> list:
            """
            start new SSM automation document to start or stop RDS clusters.
            Parameters:
            event (dict): event from SSM automation
                example:
                    {
                        "RdsResourceArns": [
                            "arn:aws:rds:us-east-1:account:cluster:cluster-3d3r",
                            "arn:aws:rds:us-east-1:account:cluster:cluster-1",
                            "arn:aws:rds:us-east-1:account:cluster:cluster-2",
                            "arn:aws:rds:us-east-1:account:cluster:cluster-a1df"
                            ],
                        "Action": "start"|"stop"
                        "Region": "us-east-1",
                        "SecondaryAutomationName": "secondary-automation-name",
                        "SolutionId": "SO0030",
                        "SolutionVersion": "v2.0.0",
                        "ExecutionRoleArn": "arn:aws:iam::account:role/role-name"
                    }
            context (dict): context object

            Returns:
            list : list of secondary execution ids

           """
            logging.debug(context)
            execution_ids = []
            # handle empty arn list
            if not event.get('RdsResourceArns'):
                return execution_ids

            ssm_client = get_client(event)
            resource_list = get_resource_list(event.get('RdsResourceArns'))

            for rds_cluster_name in resource_list:
                execution_id = ssm_client.start_automation_execution(
                    # Launch SSM Doc via Automation
                    DocumentName=event.get('SecondaryAutomationName'),
                    Parameters={
                        "ClusterName": [
                            rds_cluster_name
                        ],
                        "Action": [
                            event.get('Action')
                        ],
                        "AutomationAssumeRole": [
                            event.get('ExecutionRoleArn')
                        ]
                    }
                )['AutomationExecutionId']
                execution_ids.append(execution_id)

            return execution_ids


        def get_client(event):
            """Create Boto3 client for SSM service"""
            boto_config = Config(
                user_agent_extra=f'AwsSolution/{event.get("SolutionId")}/'
                                 f'{event.get("SolutionVersion")}',
                retries={
                    'mode': 'standard'
                }
            )

            return boto3.client('ssm',
                                region_name=event.get('Region'),
                                config=boto_config)


        def get_resource_list(arn_list: list) -> list:
            """ Parse the arn list and return rds db or cluster ids"""
            cluster_separator = ":cluster:"
            cluster_prefix = "cluster-"

            logging.info("Found RDS Cluster list.")
            cluster_ids = split_arn_list(arn_list, cluster_separator)
            # filtering cluster ids for duplicate cluster ids
            return [x for x in cluster_ids if not x.startswith(cluster_prefix)]


        def split_arn_list(arn_list, separator):
            resource_ids = []
            for arn in arn_list:
                resource_id = arn.split(separator)[1]
                resource_ids.append(resource_id)
            return resource_ids
    outputs:
      - Name: RdsClusterArns
        Selector: $.Payload.RdsClusterArns
        Type: StringList
      - Name: SecondaryExecutionIds
        Selector: $.Payload.SecondaryExecutionIds
        Type: StringList
  - name: SetSchedulerResourceTags
    action: aws:executeAutomation
    maxAttempts: 3
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      DocumentName: AWS-SetRequiredTags
      RuntimeParameters:
        RequiredTags: "{{ ResourceTagMapList }}"
        ResourceARNs: '{{ getTaggedRDSClusterIds.rdsDbClusterArns }}'
        AutomationAssumeRole: '{{ AutomationAssumeRole }}'
    isEnd: true
